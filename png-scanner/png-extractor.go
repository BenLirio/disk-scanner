
//line png-extractor.rl:1
package main

import (
  "io"
  "log"
  "os"
  "fmt"
  "encoding/binary"
)

const (
  FROM_BEGINING int = 0
)
var BUF_LEN int = 256
var verb int = 1
var offset int
var PNG_MAGIC_LEN int = 8
var chunkLen int = 0
var cs int
var p int
var pe int
var data []byte
var toSkip bool = false
var pngStart int
var pngEnd int
var err error
var f *os.File

func logAddr(p int) string {
  return fmt.Sprintf("0x%02X", p)
}
func uint32Val(p int) uint32 {
  return binary.BigEndian.Uint32(data[p-3:p+1])
}
func check(e error) {
  if e != nil { log.Fatal(e) }
}
var uidIdx int = 0
func genPNGFileName() string {
  s := fmt.Sprintf("found%d.png", uidIdx)
  uidIdx += 1
  return s
}


//line png-extractor.go:49
var _png_extractor_actions []byte = []byte{
	0, 1, 0, 1, 1, 1, 2, 1, 3, 
	1, 4, 1, 5, 1, 6, 2, 0, 
	3, 2, 3, 1, 2, 3, 5, 2, 
	3, 6, 2, 4, 1, 2, 5, 1, 
	2, 6, 1, 
}

var _png_extractor_key_offsets []int16 = []int16{
	0, 1, 3, 5, 7, 9, 11, 13, 
	15, 16, 17, 18, 19, 21, 23, 25, 
	27, 28, 29, 30, 31, 32, 33, 34, 
	35, 38, 40, 42, 44, 45, 46, 47, 
	48, 49, 50, 51, 52, 55, 58, 60, 
	62, 63, 64, 65, 66, 68, 70, 72, 
	74, 76, 78, 80, 82, 84, 87, 90, 
	92, 96, 98, 100, 104, 106, 108, 110, 
	114, 116, 118, 120, 122, 126, 128, 130, 
	132, 134, 136, 140, 142, 144, 146, 148, 
	150, 152, 156, 158, 160, 162, 164, 166, 
	168, 170, 173, 176, 178, 180, 182, 184, 
	186, 188, 189, 190, 191, 192, 195, 198, 
	200, 202, 205, 207, 209, 211, 212, 213, 
	214, 215, 218, 221, 223, 225, 228, 231, 
	233, 235, 236, 237, 238, 239, 241, 243, 
	245, 247, 249, 251, 253, 255, 257, 259, 
	261, 264, 267, 269, 271, 273, 275, 277, 
	279, 281, 283, 285, 287, 290, 293, 295, 
	299, 301, 303, 307, 309, 311, 313, 317, 
	320, 322, 326, 328, 330, 333, 335, 337, 
	339, 343, 345, 347, 349, 351, 353, 355, 
	359, 362, 365, 367, 369, 373, 375, 379, 
	381, 383, 385, 389, 391, 393, 397, 399, 
	401, 403, 407, 409, 411, 413, 417, 419, 
	421, 423, 426, 428, 430, 432, 435, 438, 
	440, 443, 445, 447, 449, 451, 453, 455, 
	458, 460, 462, 464, 466, 468, 470, 472, 
	474, 476, 478, 480, 482, 484, 486, 488, 
	490, 
}

var _png_extractor_trans_keys []byte = []byte{
	137, 80, 137, 78, 137, 71, 137, 13, 
	137, 10, 137, 26, 137, 10, 137, 137, 
	137, 137, 137, 73, 137, 72, 137, 68, 
	137, 82, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 73, 80, 137, 68, 137, 
	65, 137, 84, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 73, 80, 137, 68, 
	69, 137, 78, 137, 68, 137, 137, 137, 
	137, 137, 80, 137, 80, 137, 78, 137, 
	80, 137, 78, 137, 71, 137, 76, 137, 
	84, 137, 69, 137, 73, 80, 137, 76, 
	78, 137, 80, 137, 73, 78, 80, 137, 
	80, 137, 78, 137, 71, 73, 80, 137, 
	80, 137, 78, 137, 71, 137, 13, 73, 
	80, 137, 80, 137, 78, 137, 71, 137, 
	13, 137, 10, 73, 80, 137, 80, 137, 
	78, 137, 71, 137, 13, 137, 10, 137, 
	26, 73, 80, 137, 80, 137, 78, 137, 
	71, 137, 13, 137, 10, 137, 26, 137, 
	10, 73, 80, 137, 80, 137, 78, 137, 
	71, 137, 13, 137, 10, 137, 26, 137, 
	10, 137, 73, 80, 137, 68, 69, 137, 
	65, 137, 84, 137, 73, 137, 72, 137, 
	68, 137, 82, 137, 137, 137, 137, 137, 
	73, 80, 137, 68, 69, 137, 65, 137, 
	84, 137, 73, 80, 137, 68, 137, 65, 
	137, 84, 137, 137, 137, 137, 137, 73, 
	80, 137, 68, 69, 137, 65, 137, 84, 
	137, 73, 80, 137, 68, 69, 137, 78, 
	137, 68, 137, 137, 137, 137, 137, 80, 
	137, 80, 137, 78, 137, 80, 137, 78, 
	137, 71, 137, 76, 137, 84, 137, 69, 
	137, 78, 137, 68, 137, 73, 80, 137, 
	68, 69, 137, 65, 137, 84, 137, 78, 
	137, 68, 137, 76, 137, 84, 137, 69, 
	137, 76, 137, 84, 137, 69, 137, 73, 
	80, 137, 76, 78, 137, 80, 137, 73, 
	78, 80, 137, 80, 137, 78, 137, 71, 
	73, 80, 137, 80, 137, 78, 137, 71, 
	137, 13, 73, 80, 137, 73, 80, 137, 
	80, 137, 73, 78, 80, 137, 78, 137, 
	68, 137, 73, 80, 137, 68, 137, 80, 
	137, 78, 137, 71, 73, 80, 137, 76, 
	137, 84, 137, 69, 137, 80, 137, 78, 
	137, 71, 137, 13, 73, 80, 137, 73, 
	80, 137, 76, 78, 137, 71, 137, 13, 
	137, 10, 73, 80, 137, 80, 137, 73, 
	78, 80, 137, 71, 137, 13, 137, 10, 
	137, 26, 73, 80, 137, 80, 137, 78, 
	137, 71, 73, 80, 137, 13, 137, 10, 
	137, 26, 137, 10, 73, 80, 137, 80, 
	137, 78, 137, 71, 137, 13, 73, 80, 
	137, 10, 137, 26, 137, 10, 137, 73, 
	80, 137, 68, 137, 80, 137, 78, 137, 
	71, 73, 137, 73, 80, 137, 80, 137, 
	73, 78, 137, 76, 137, 84, 137, 69, 
	137, 80, 137, 78, 137, 71, 137, 13, 
	73, 137, 78, 137, 68, 137, 73, 137, 
	72, 137, 68, 137, 82, 137, 80, 137, 
	78, 137, 80, 137, 78, 137, 80, 137, 
	78, 137, 71, 137, 80, 137, 78, 137, 
	71, 137, 13, 137, 
}

var _png_extractor_single_lengths []byte = []byte{
	1, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	3, 2, 2, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 3, 3, 2, 2, 
	1, 1, 1, 1, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 3, 2, 
	4, 2, 2, 4, 2, 2, 2, 4, 
	2, 2, 2, 2, 4, 2, 2, 2, 
	2, 2, 4, 2, 2, 2, 2, 2, 
	2, 4, 2, 2, 2, 2, 2, 2, 
	2, 3, 3, 2, 2, 2, 2, 2, 
	2, 1, 1, 1, 1, 3, 3, 2, 
	2, 3, 2, 2, 2, 1, 1, 1, 
	1, 3, 3, 2, 2, 3, 3, 2, 
	2, 1, 1, 1, 1, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 3, 3, 2, 4, 
	2, 2, 4, 2, 2, 2, 4, 3, 
	2, 4, 2, 2, 3, 2, 2, 2, 
	4, 2, 2, 2, 2, 2, 2, 4, 
	3, 3, 2, 2, 4, 2, 4, 2, 
	2, 2, 4, 2, 2, 4, 2, 2, 
	2, 4, 2, 2, 2, 4, 2, 2, 
	2, 3, 2, 2, 2, 3, 3, 2, 
	3, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 
}

var _png_extractor_range_lengths []byte = []byte{
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 
}

var _png_extractor_index_offsets []int16 = []int16{
	0, 2, 5, 8, 11, 14, 17, 20, 
	23, 25, 27, 29, 31, 34, 37, 40, 
	43, 45, 47, 49, 51, 53, 55, 57, 
	59, 63, 66, 69, 72, 74, 76, 78, 
	80, 82, 84, 86, 88, 92, 96, 99, 
	102, 104, 106, 108, 110, 113, 116, 119, 
	122, 125, 128, 131, 134, 137, 141, 145, 
	148, 153, 156, 159, 164, 167, 170, 173, 
	178, 181, 184, 187, 190, 195, 198, 201, 
	204, 207, 210, 215, 218, 221, 224, 227, 
	230, 233, 238, 241, 244, 247, 250, 253, 
	256, 259, 263, 267, 270, 273, 276, 279, 
	282, 285, 287, 289, 291, 293, 297, 301, 
	304, 307, 311, 314, 317, 320, 322, 324, 
	326, 328, 332, 336, 339, 342, 346, 350, 
	353, 356, 358, 360, 362, 364, 367, 370, 
	373, 376, 379, 382, 385, 388, 391, 394, 
	397, 401, 405, 408, 411, 414, 417, 420, 
	423, 426, 429, 432, 435, 439, 443, 446, 
	451, 454, 457, 462, 465, 468, 471, 476, 
	480, 483, 488, 491, 494, 498, 501, 504, 
	507, 512, 515, 518, 521, 524, 527, 530, 
	535, 539, 543, 546, 549, 554, 557, 562, 
	565, 568, 571, 576, 579, 582, 587, 590, 
	593, 596, 601, 604, 607, 610, 615, 618, 
	621, 624, 628, 631, 634, 637, 641, 645, 
	648, 652, 655, 658, 661, 664, 667, 670, 
	674, 677, 680, 683, 686, 689, 692, 695, 
	698, 701, 704, 707, 710, 713, 716, 719, 
	722, 
}

var _png_extractor_indicies []byte = []byte{
	1, 0, 2, 1, 0, 3, 1, 0, 
	4, 1, 0, 5, 1, 0, 6, 1, 
	0, 7, 1, 0, 8, 1, 0, 10, 
	9, 12, 11, 14, 13, 16, 15, 17, 
	1, 0, 18, 1, 0, 19, 1, 0, 
	20, 1, 0, 22, 21, 24, 23, 26, 
	25, 28, 27, 30, 29, 32, 31, 34, 
	33, 36, 35, 37, 38, 1, 0, 39, 
	1, 0, 40, 1, 0, 41, 1, 0, 
	43, 42, 45, 44, 47, 46, 49, 48, 
	51, 50, 53, 52, 55, 54, 57, 56, 
	58, 38, 1, 0, 39, 59, 1, 0, 
	60, 1, 0, 61, 1, 0, 63, 62, 
	65, 64, 67, 66, 69, 68, 70, 69, 
	68, 71, 67, 66, 72, 69, 68, 73, 
	65, 64, 74, 67, 66, 75, 69, 68, 
	76, 1, 0, 77, 1, 0, 78, 1, 
	0, 58, 79, 1, 0, 76, 3, 1, 
	0, 80, 57, 56, 58, 3, 38, 1, 
	0, 81, 55, 54, 82, 57, 56, 4, 
	58, 38, 1, 0, 83, 53, 52, 84, 
	55, 54, 85, 57, 56, 5, 58, 38, 
	1, 0, 86, 51, 50, 87, 53, 52, 
	88, 55, 54, 89, 57, 56, 6, 58, 
	38, 1, 0, 90, 49, 48, 91, 51, 
	50, 92, 53, 52, 93, 55, 54, 94, 
	57, 56, 7, 58, 38, 1, 0, 95, 
	47, 46, 96, 49, 48, 97, 51, 50, 
	98, 53, 52, 99, 55, 54, 100, 57, 
	56, 8, 58, 38, 1, 0, 101, 45, 
	44, 102, 47, 46, 103, 49, 48, 104, 
	51, 50, 105, 53, 52, 106, 55, 54, 
	107, 57, 56, 108, 109, 10, 9, 110, 
	111, 12, 11, 112, 14, 13, 113, 16, 
	15, 114, 43, 42, 115, 45, 44, 116, 
	47, 46, 117, 49, 48, 119, 118, 121, 
	120, 123, 122, 125, 124, 126, 127, 30, 
	29, 128, 129, 32, 31, 130, 34, 33, 
	131, 36, 35, 132, 133, 43, 42, 134, 
	45, 44, 135, 47, 46, 136, 49, 48, 
	138, 137, 140, 139, 142, 141, 144, 143, 
	145, 146, 51, 50, 147, 148, 53, 52, 
	149, 55, 54, 150, 57, 56, 151, 133, 
	43, 42, 134, 152, 45, 44, 153, 47, 
	46, 154, 49, 48, 156, 155, 158, 157, 
	160, 159, 162, 161, 163, 162, 161, 164, 
	160, 159, 165, 162, 161, 166, 158, 157, 
	167, 160, 159, 168, 162, 161, 169, 45, 
	44, 170, 47, 46, 171, 49, 48, 172, 
	55, 54, 173, 57, 56, 174, 175, 63, 
	62, 176, 177, 65, 64, 178, 67, 66, 
	179, 69, 68, 180, 67, 66, 181, 69, 
	68, 182, 65, 64, 183, 67, 66, 184, 
	69, 68, 185, 53, 52, 186, 55, 54, 
	187, 57, 56, 145, 188, 51, 50, 185, 
	87, 53, 52, 189, 144, 143, 145, 91, 
	146, 51, 50, 190, 142, 141, 191, 144, 
	143, 97, 145, 146, 51, 50, 192, 140, 
	139, 193, 142, 141, 194, 144, 143, 104, 
	145, 146, 51, 50, 37, 79, 1, 0, 
	195, 36, 35, 37, 3, 38, 1, 0, 
	196, 34, 33, 197, 36, 35, 198, 175, 
	63, 62, 176, 65, 64, 199, 34, 33, 
	200, 36, 35, 4, 37, 38, 1, 0, 
	201, 32, 31, 202, 34, 33, 203, 36, 
	35, 204, 32, 31, 205, 34, 33, 206, 
	36, 35, 5, 37, 38, 1, 0, 126, 
	207, 30, 29, 201, 208, 32, 31, 209, 
	34, 33, 210, 36, 35, 6, 37, 38, 
	1, 0, 211, 125, 124, 126, 212, 127, 
	30, 29, 213, 32, 31, 214, 34, 33, 
	215, 36, 35, 7, 37, 38, 1, 0, 
	216, 123, 122, 217, 125, 124, 218, 126, 
	127, 30, 29, 219, 32, 31, 220, 34, 
	33, 221, 36, 35, 8, 37, 38, 1, 
	0, 222, 121, 120, 223, 123, 122, 224, 
	125, 124, 225, 126, 127, 30, 29, 226, 
	32, 31, 227, 34, 33, 228, 36, 35, 
	229, 109, 10, 9, 110, 12, 11, 230, 
	14, 13, 231, 16, 15, 4, 17, 1, 
	0, 17, 2, 1, 0, 232, 16, 15, 
	17, 3, 1, 0, 233, 12, 11, 234, 
	14, 13, 235, 16, 15, 236, 12, 11, 
	237, 14, 13, 238, 16, 15, 5, 17, 
	1, 0, 239, 14, 13, 240, 16, 15, 
	241, 63, 62, 242, 65, 64, 243, 67, 
	66, 244, 69, 68, 245, 30, 29, 208, 
	32, 31, 246, 28, 27, 212, 30, 29, 
	247, 26, 25, 248, 28, 27, 218, 30, 
	29, 249, 24, 23, 250, 26, 25, 251, 
	28, 27, 225, 30, 29, 
}

var _png_extractor_trans_targs []byte = []byte{
	0, 1, 2, 3, 4, 5, 6, 7, 
	8, 9, 212, 10, 203, 11, 207, 12, 
	206, 13, 14, 15, 16, 17, 229, 18, 
	226, 19, 224, 20, 222, 21, 172, 22, 
	166, 23, 160, 24, 159, 25, 50, 26, 
	27, 28, 29, 82, 30, 75, 31, 69, 
	32, 64, 33, 60, 34, 57, 35, 55, 
	36, 53, 37, 38, 39, 40, 41, 47, 
	42, 45, 43, 44, 0, 1, 2, 46, 
	3, 48, 49, 4, 51, 52, 28, 54, 
	56, 58, 59, 61, 62, 63, 65, 66, 
	67, 68, 70, 71, 72, 73, 74, 76, 
	77, 78, 79, 80, 81, 83, 84, 85, 
	86, 87, 88, 89, 90, 209, 91, 216, 
	92, 93, 94, 95, 96, 97, 98, 194, 
	99, 187, 100, 181, 101, 176, 102, 169, 
	103, 162, 104, 105, 106, 131, 107, 108, 
	109, 110, 155, 111, 152, 112, 150, 113, 
	148, 114, 145, 115, 134, 116, 117, 118, 
	119, 120, 121, 122, 128, 123, 126, 124, 
	125, 36, 53, 56, 127, 59, 129, 130, 
	63, 132, 133, 109, 135, 136, 137, 142, 
	138, 140, 139, 28, 141, 40, 143, 144, 
	28, 146, 147, 117, 149, 151, 153, 154, 
	156, 157, 158, 161, 163, 164, 165, 167, 
	168, 170, 171, 105, 173, 174, 175, 177, 
	178, 179, 180, 182, 183, 184, 185, 186, 
	188, 189, 190, 191, 192, 193, 195, 196, 
	197, 198, 199, 200, 201, 202, 204, 205, 
	208, 210, 211, 93, 213, 214, 215, 217, 
	218, 219, 220, 221, 16, 223, 225, 227, 
	228, 230, 231, 232, 
}

var _png_extractor_trans_actions []byte = []byte{
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 7, 
	7, 0, 0, 0, 9, 5, 5, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 7, 7, 0, 0, 0, 
	0, 13, 5, 5, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	7, 7, 0, 0, 0, 11, 5, 5, 
	0, 0, 0, 0, 3, 3, 3, 0, 
	3, 0, 0, 3, 0, 0, 0, 0, 
	7, 0, 7, 0, 0, 7, 0, 0, 
	0, 7, 0, 0, 0, 0, 7, 0, 
	0, 0, 0, 0, 7, 0, 0, 0, 
	0, 0, 0, 15, 0, 0, 0, 0, 
	0, 24, 5, 0, 0, 9, 5, 5, 
	0, 0, 0, 0, 7, 7, 0, 0, 
	0, 0, 0, 24, 5, 5, 0, 0, 
	13, 5, 5, 0, 0, 0, 0, 7, 
	7, 0, 0, 0, 0, 0, 24, 5, 
	0, 0, 11, 5, 5, 0, 0, 0, 
	0, 18, 18, 18, 0, 18, 0, 0, 
	18, 0, 0, 0, 0, 21, 5, 5, 
	0, 0, 0, 33, 0, 30, 0, 0, 
	3, 0, 0, 7, 0, 7, 0, 7, 
	0, 0, 7, 7, 0, 21, 5, 0, 
	7, 0, 0, 7, 0, 0, 7, 0, 
	0, 0, 7, 7, 0, 0, 0, 7, 
	0, 7, 0, 0, 0, 7, 0, 0, 
	7, 0, 0, 0, 15, 0, 0, 7, 
	7, 0, 0, 7, 0, 0, 7, 0, 
	21, 5, 0, 0, 27, 0, 0, 0, 
	0, 0, 0, 0, 
}

const png_extractor_start int = 0
const png_extractor_first_final int = 0
const png_extractor_error int = -1

const png_extractor_en_png_extractor int = 0


//line png-extractor.rl:93



func main() {
  data = make([]byte, BUF_LEN)
  
//line png-extractor.go:433
	{
	cs = png_extractor_start
	}

//line png-extractor.rl:99


  offset = 0
  f,err = os.Open("data/image.png")
  check(err)

  for {
    n,err := f.Read(data)
    if err == io.EOF { break }
    check(err)
    p = 0
    pe = n
    
//line png-extractor.go:452
	{
	var _klen int
	var _trans int
	var _acts int
	var _nacts uint
	var _keys int
	if p == pe {
		goto _test_eof
	}
_resume:
	_keys = int(_png_extractor_key_offsets[cs])
	_trans = int(_png_extractor_index_offsets[cs])

	_klen = int(_png_extractor_single_lengths[cs])
	if _klen > 0 {
		_lower := int(_keys)
		var _mid int
		_upper := int(_keys + _klen - 1)
		for {
			if _upper < _lower {
				break
			}

			_mid = _lower + ((_upper - _lower) >> 1)
			switch {
			case data[p] < _png_extractor_trans_keys[_mid]:
				_upper = _mid - 1
			case data[p] > _png_extractor_trans_keys[_mid]:
				_lower = _mid + 1
			default:
				_trans += int(_mid - int(_keys))
				goto _match
			}
		}
		_keys += _klen
		_trans += _klen
	}

	_klen = int(_png_extractor_range_lengths[cs])
	if _klen > 0 {
		_lower := int(_keys)
		var _mid int
		_upper := int(_keys + (_klen << 1) - 2)
		for {
			if _upper < _lower {
				break
			}

			_mid = _lower + (((_upper - _lower) >> 1) & ^1)
			switch {
			case data[p] < _png_extractor_trans_keys[_mid]:
				_upper = _mid - 2
			case data[p] > _png_extractor_trans_keys[_mid + 1]:
				_lower = _mid + 2
			default:
				_trans += int((_mid - int(_keys)) >> 1)
				goto _match
			}
		}
		_trans += _klen
	}

_match:
	_trans = int(_png_extractor_indicies[_trans])
	cs = int(_png_extractor_trans_targs[_trans])

	if _png_extractor_trans_actions[_trans] == 0 {
		goto _again
	}

	_acts = int(_png_extractor_trans_actions[_trans])
	_nacts = uint(_png_extractor_actions[_acts]); _acts++
	for ; _nacts > 0; _nacts-- {
		_acts++
		switch _png_extractor_actions[_acts-1] {
		case 0:
//line png-extractor.rl:47

    pngStart = offset+p-PNG_MAGIC_LEN+1
    if verb>1 { fmt.Printf("png found at: %s\n", logAddr(pngStart)) }
  
		case 1:
//line png-extractor.rl:51

    pngEnd = offset+p
    if verb>0 {
      fmt.Printf("Valid PNG from %s to %s\n", logAddr(pngStart), logAddr(pngEnd))
    }
    f.Seek(int64(pngStart),FROM_BEGINING)
    buf := make([]byte, pngEnd-pngStart)
    f.Read(buf)
    fout,err := os.Create(genPNGFileName())
    check(err)
    _,err = fout.Write(buf)
    check(err)
    f.Seek(int64(offset),FROM_BEGINING)
  
		case 2:
//line png-extractor.rl:65

    if p + chunkLen < BUF_LEN {
      p += chunkLen
    } else {
      toSkip = true
      p++; goto _out

    }
  
		case 3:
//line png-extractor.rl:77
 chunkLen=int(uint32Val(p)) 
		case 4:
//line png-extractor.rl:81
 if verb>1 { fmt.Printf("IHDR at: %s\n", logAddr(p-3)) } 
		case 5:
//line png-extractor.rl:82
 if verb>1 { fmt.Printf("IEND at: %s\n", logAddr(p-3)) } 
		case 6:
//line png-extractor.rl:83
 if verb>1 { fmt.Printf("PLTE|IDAT at: %s\n", logAddr(p-3)) } 
//line png-extractor.go:573
		}
	}

_again:
	p++
	if p != pe {
		goto _resume
	}
	_test_eof: {}
	_out: {}
	}

//line png-extractor.rl:112
    if toSkip {
      toSkip = false
      _, err = f.Seek(int64(offset + p + chunkLen), 0)
      check(err)
      offset += p + chunkLen
    } else {
      offset += n
    }
  }
}
