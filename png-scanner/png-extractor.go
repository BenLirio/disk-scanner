
//line png-extractor.rl:1
package main

import (
  "io"
  "log"
  "os"
  "fmt"
  "encoding/binary"
)

var BUF_LEN int = 256
var verb bool = true
var offset int
var PNG_MAGIC_LEN int = 8
var chunkLen int = 0
var cs int
var p int
var pe int
var data []byte
var toSkip bool = false

func logAddr(p int) string {
  return fmt.Sprintf("0x%02X", offset+p)
}
func uint32Val(p int) uint32 {
  return binary.BigEndian.Uint32(data[p-3:p+1])
}
func check(e error) {
  if e != nil { log.Fatal(e) }
}


//line png-extractor.go:36
var _png_extractor_actions []byte = []byte{
	0, 1, 0, 1, 1, 1, 2, 1, 3, 
	1, 4, 1, 5, 2, 0, 2, 2, 
	2, 4, 2, 2, 5, 
}

var _png_extractor_key_offsets []int16 = []int16{
	0, 1, 3, 5, 7, 9, 11, 13, 
	15, 16, 17, 18, 19, 21, 23, 25, 
	27, 28, 29, 30, 31, 32, 33, 34, 
	35, 38, 40, 42, 44, 45, 46, 47, 
	48, 49, 50, 51, 52, 55, 58, 60, 
	62, 63, 65, 67, 69, 72, 75, 77, 
	81, 83, 85, 89, 91, 93, 95, 99, 
	101, 103, 105, 107, 111, 113, 115, 117, 
	119, 121, 125, 127, 129, 131, 133, 135, 
	137, 141, 143, 145, 147, 149, 151, 153, 
	155, 158, 161, 163, 165, 167, 169, 171, 
	173, 174, 175, 176, 177, 180, 183, 185, 
	187, 190, 192, 194, 196, 197, 198, 199, 
	200, 203, 206, 208, 210, 213, 216, 218, 
	220, 221, 223, 225, 227, 229, 231, 234, 
	236, 238, 240, 243, 246, 248, 252, 254, 
	256, 260, 262, 264, 266, 270, 273, 275, 
	279, 281, 283, 286, 288, 290, 294, 296, 
	298, 300, 302, 304, 306, 310, 313, 316, 
	318, 320, 324, 326, 330, 332, 334, 336, 
	340, 342, 344, 348, 350, 352, 354, 358, 
	360, 362, 364, 368, 370, 372, 374, 377, 
	379, 381, 383, 386, 389, 391, 394, 396, 
	398, 400, 402, 404, 406, 409, 411, 413, 
	415, 417, 419, 421, 423, 425, 427, 429, 
	431, 433, 435, 
}

var _png_extractor_trans_keys []byte = []byte{
	137, 80, 137, 78, 137, 71, 137, 13, 
	137, 10, 137, 26, 137, 10, 137, 137, 
	137, 137, 137, 73, 137, 72, 137, 68, 
	137, 82, 137, 137, 137, 137, 137, 137, 
	137, 137, 137, 73, 80, 137, 68, 137, 
	65, 137, 84, 137, 137, 137, 137, 137, 
	137, 137, 137, 137, 73, 80, 137, 68, 
	69, 137, 78, 137, 68, 137, 137, 76, 
	137, 84, 137, 69, 137, 73, 80, 137, 
	76, 78, 137, 80, 137, 73, 78, 80, 
	137, 80, 137, 78, 137, 71, 73, 80, 
	137, 80, 137, 78, 137, 71, 137, 13, 
	73, 80, 137, 80, 137, 78, 137, 71, 
	137, 13, 137, 10, 73, 80, 137, 80, 
	137, 78, 137, 71, 137, 13, 137, 10, 
	137, 26, 73, 80, 137, 80, 137, 78, 
	137, 71, 137, 13, 137, 10, 137, 26, 
	137, 10, 73, 80, 137, 80, 137, 78, 
	137, 71, 137, 13, 137, 10, 137, 26, 
	137, 10, 137, 73, 80, 137, 68, 69, 
	137, 65, 137, 84, 137, 73, 137, 72, 
	137, 68, 137, 82, 137, 137, 137, 137, 
	137, 73, 80, 137, 68, 69, 137, 65, 
	137, 84, 137, 73, 80, 137, 68, 137, 
	65, 137, 84, 137, 137, 137, 137, 137, 
	73, 80, 137, 68, 69, 137, 65, 137, 
	84, 137, 73, 80, 137, 68, 69, 137, 
	78, 137, 68, 137, 137, 76, 137, 84, 
	137, 69, 137, 78, 137, 68, 137, 73, 
	80, 137, 76, 137, 84, 137, 69, 137, 
	73, 80, 137, 76, 78, 137, 80, 137, 
	73, 78, 80, 137, 80, 137, 78, 137, 
	71, 73, 80, 137, 80, 137, 78, 137, 
	71, 137, 13, 73, 80, 137, 73, 80, 
	137, 80, 137, 73, 78, 80, 137, 78, 
	137, 68, 137, 73, 80, 137, 80, 137, 
	78, 137, 71, 73, 80, 137, 76, 137, 
	84, 137, 69, 137, 80, 137, 78, 137, 
	71, 137, 13, 73, 80, 137, 73, 80, 
	137, 76, 78, 137, 71, 137, 13, 137, 
	10, 73, 80, 137, 80, 137, 73, 78, 
	80, 137, 71, 137, 13, 137, 10, 137, 
	26, 73, 80, 137, 80, 137, 78, 137, 
	71, 73, 80, 137, 13, 137, 10, 137, 
	26, 137, 10, 73, 80, 137, 80, 137, 
	78, 137, 71, 137, 13, 73, 80, 137, 
	10, 137, 26, 137, 10, 137, 73, 80, 
	137, 68, 137, 80, 137, 78, 137, 71, 
	73, 137, 73, 80, 137, 80, 137, 73, 
	78, 137, 76, 137, 84, 137, 69, 137, 
	80, 137, 78, 137, 71, 137, 13, 73, 
	137, 78, 137, 68, 137, 73, 137, 80, 
	137, 78, 137, 80, 137, 78, 137, 80, 
	137, 78, 137, 71, 137, 80, 137, 78, 
	137, 71, 137, 13, 137, 
}

var _png_extractor_single_lengths []byte = []byte{
	1, 2, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 2, 2, 2, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	3, 2, 2, 2, 1, 1, 1, 1, 
	1, 1, 1, 1, 3, 3, 2, 2, 
	1, 2, 2, 2, 3, 3, 2, 4, 
	2, 2, 4, 2, 2, 2, 4, 2, 
	2, 2, 2, 4, 2, 2, 2, 2, 
	2, 4, 2, 2, 2, 2, 2, 2, 
	4, 2, 2, 2, 2, 2, 2, 2, 
	3, 3, 2, 2, 2, 2, 2, 2, 
	1, 1, 1, 1, 3, 3, 2, 2, 
	3, 2, 2, 2, 1, 1, 1, 1, 
	3, 3, 2, 2, 3, 3, 2, 2, 
	1, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 3, 3, 2, 4, 2, 2, 
	4, 2, 2, 2, 4, 3, 2, 4, 
	2, 2, 3, 2, 2, 4, 2, 2, 
	2, 2, 2, 2, 4, 3, 3, 2, 
	2, 4, 2, 4, 2, 2, 2, 4, 
	2, 2, 4, 2, 2, 2, 4, 2, 
	2, 2, 4, 2, 2, 2, 3, 2, 
	2, 2, 3, 3, 2, 3, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 
}

var _png_extractor_range_lengths []byte = []byte{
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 
}

var _png_extractor_index_offsets []int16 = []int16{
	0, 2, 5, 8, 11, 14, 17, 20, 
	23, 25, 27, 29, 31, 34, 37, 40, 
	43, 45, 47, 49, 51, 53, 55, 57, 
	59, 63, 66, 69, 72, 74, 76, 78, 
	80, 82, 84, 86, 88, 92, 96, 99, 
	102, 104, 107, 110, 113, 117, 121, 124, 
	129, 132, 135, 140, 143, 146, 149, 154, 
	157, 160, 163, 166, 171, 174, 177, 180, 
	183, 186, 191, 194, 197, 200, 203, 206, 
	209, 214, 217, 220, 223, 226, 229, 232, 
	235, 239, 243, 246, 249, 252, 255, 258, 
	261, 263, 265, 267, 269, 273, 277, 280, 
	283, 287, 290, 293, 296, 298, 300, 302, 
	304, 308, 312, 315, 318, 322, 326, 329, 
	332, 334, 337, 340, 343, 346, 349, 353, 
	356, 359, 362, 366, 370, 373, 378, 381, 
	384, 389, 392, 395, 398, 403, 407, 410, 
	415, 418, 421, 425, 428, 431, 436, 439, 
	442, 445, 448, 451, 454, 459, 463, 467, 
	470, 473, 478, 481, 486, 489, 492, 495, 
	500, 503, 506, 511, 514, 517, 520, 525, 
	528, 531, 534, 539, 542, 545, 548, 552, 
	555, 558, 561, 565, 569, 572, 576, 579, 
	582, 585, 588, 591, 594, 598, 601, 604, 
	607, 610, 613, 616, 619, 622, 625, 628, 
	631, 634, 637, 
}

var _png_extractor_indicies []byte = []byte{
	1, 0, 2, 1, 0, 3, 1, 0, 
	4, 1, 0, 5, 1, 0, 6, 1, 
	0, 7, 1, 0, 8, 1, 0, 10, 
	9, 12, 11, 14, 13, 16, 15, 17, 
	1, 0, 18, 1, 0, 19, 1, 0, 
	20, 1, 0, 22, 21, 24, 23, 26, 
	25, 28, 27, 30, 29, 32, 31, 34, 
	33, 36, 35, 37, 38, 1, 0, 39, 
	1, 0, 40, 1, 0, 41, 1, 0, 
	43, 42, 45, 44, 47, 46, 49, 48, 
	51, 50, 53, 52, 55, 54, 57, 56, 
	58, 38, 1, 0, 39, 59, 1, 0, 
	60, 1, 0, 61, 1, 0, 63, 62, 
	64, 1, 0, 65, 1, 0, 66, 1, 
	0, 58, 67, 1, 0, 64, 3, 1, 
	0, 68, 57, 56, 58, 3, 38, 1, 
	0, 69, 55, 54, 70, 57, 56, 4, 
	58, 38, 1, 0, 71, 53, 52, 72, 
	55, 54, 73, 57, 56, 5, 58, 38, 
	1, 0, 74, 51, 50, 75, 53, 52, 
	76, 55, 54, 77, 57, 56, 6, 58, 
	38, 1, 0, 78, 49, 48, 79, 51, 
	50, 80, 53, 52, 81, 55, 54, 82, 
	57, 56, 7, 58, 38, 1, 0, 83, 
	47, 46, 84, 49, 48, 85, 51, 50, 
	86, 53, 52, 87, 55, 54, 88, 57, 
	56, 8, 58, 38, 1, 0, 89, 45, 
	44, 90, 47, 46, 91, 49, 48, 92, 
	51, 50, 93, 53, 52, 94, 55, 54, 
	95, 57, 56, 96, 97, 10, 9, 98, 
	99, 12, 11, 100, 14, 13, 101, 16, 
	15, 102, 43, 42, 103, 45, 44, 104, 
	47, 46, 105, 49, 48, 107, 106, 109, 
	108, 111, 110, 113, 112, 114, 115, 30, 
	29, 116, 117, 32, 31, 118, 34, 33, 
	119, 36, 35, 120, 121, 43, 42, 122, 
	45, 44, 123, 47, 46, 124, 49, 48, 
	126, 125, 128, 127, 130, 129, 132, 131, 
	133, 134, 51, 50, 135, 136, 53, 52, 
	137, 55, 54, 138, 57, 56, 139, 121, 
	43, 42, 122, 140, 45, 44, 141, 47, 
	46, 142, 49, 48, 144, 143, 145, 45, 
	44, 146, 47, 46, 147, 49, 48, 148, 
	55, 54, 149, 57, 56, 150, 151, 63, 
	62, 152, 53, 52, 153, 55, 54, 154, 
	57, 56, 133, 155, 51, 50, 152, 75, 
	53, 52, 156, 132, 131, 133, 79, 134, 
	51, 50, 157, 130, 129, 158, 132, 131, 
	85, 133, 134, 51, 50, 159, 128, 127, 
	160, 130, 129, 161, 132, 131, 92, 133, 
	134, 51, 50, 37, 67, 1, 0, 162, 
	36, 35, 37, 3, 38, 1, 0, 163, 
	34, 33, 164, 36, 35, 165, 151, 63, 
	62, 166, 34, 33, 167, 36, 35, 4, 
	37, 38, 1, 0, 168, 32, 31, 169, 
	34, 33, 170, 36, 35, 171, 32, 31, 
	172, 34, 33, 173, 36, 35, 5, 37, 
	38, 1, 0, 114, 174, 30, 29, 168, 
	175, 32, 31, 176, 34, 33, 177, 36, 
	35, 6, 37, 38, 1, 0, 178, 113, 
	112, 114, 179, 115, 30, 29, 180, 32, 
	31, 181, 34, 33, 182, 36, 35, 7, 
	37, 38, 1, 0, 183, 111, 110, 184, 
	113, 112, 185, 114, 115, 30, 29, 186, 
	32, 31, 187, 34, 33, 188, 36, 35, 
	8, 37, 38, 1, 0, 189, 109, 108, 
	190, 111, 110, 191, 113, 112, 192, 114, 
	115, 30, 29, 193, 32, 31, 194, 34, 
	33, 195, 36, 35, 196, 97, 10, 9, 
	98, 12, 11, 197, 14, 13, 198, 16, 
	15, 4, 17, 1, 0, 17, 2, 1, 
	0, 199, 16, 15, 17, 3, 1, 0, 
	200, 12, 11, 201, 14, 13, 202, 16, 
	15, 203, 12, 11, 204, 14, 13, 205, 
	16, 15, 5, 17, 1, 0, 206, 14, 
	13, 207, 16, 15, 208, 63, 62, 209, 
	30, 29, 175, 32, 31, 210, 28, 27, 
	179, 30, 29, 211, 26, 25, 212, 28, 
	27, 185, 30, 29, 213, 24, 23, 214, 
	26, 25, 215, 28, 27, 192, 30, 29, 
	
}

var _png_extractor_trans_targs []byte = []byte{
	0, 1, 2, 3, 4, 5, 6, 7, 
	8, 9, 185, 10, 176, 11, 180, 12, 
	179, 13, 14, 15, 16, 17, 199, 18, 
	196, 19, 194, 20, 192, 21, 145, 22, 
	139, 23, 134, 24, 133, 25, 41, 26, 
	27, 28, 29, 73, 30, 66, 31, 60, 
	32, 55, 33, 51, 34, 48, 35, 46, 
	36, 44, 37, 38, 39, 40, 0, 1, 
	42, 43, 28, 45, 47, 49, 50, 52, 
	53, 54, 56, 57, 58, 59, 61, 62, 
	63, 64, 65, 67, 68, 69, 70, 71, 
	72, 74, 75, 76, 77, 78, 79, 80, 
	81, 182, 82, 189, 83, 84, 85, 86, 
	87, 88, 89, 167, 90, 160, 91, 154, 
	92, 149, 93, 142, 94, 136, 95, 96, 
	97, 113, 98, 99, 100, 101, 129, 102, 
	126, 103, 124, 104, 122, 105, 119, 106, 
	116, 107, 108, 109, 110, 111, 112, 33, 
	51, 114, 115, 100, 117, 118, 37, 41, 
	120, 121, 108, 123, 125, 127, 128, 130, 
	131, 132, 135, 137, 138, 25, 140, 141, 
	143, 144, 96, 146, 147, 148, 150, 151, 
	152, 153, 155, 156, 157, 158, 159, 161, 
	162, 163, 164, 165, 166, 168, 169, 170, 
	171, 172, 173, 174, 175, 177, 178, 181, 
	183, 184, 84, 186, 187, 188, 190, 191, 
	13, 193, 195, 197, 198, 200, 201, 202, 
}

var _png_extractor_trans_actions []byte = []byte{
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 5, 
	5, 0, 0, 0, 7, 3, 3, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 5, 5, 0, 0, 0, 
	0, 11, 3, 3, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	5, 5, 0, 0, 0, 9, 3, 3, 
	0, 0, 0, 0, 5, 0, 5, 0, 
	0, 5, 0, 0, 0, 5, 0, 0, 
	0, 0, 5, 0, 0, 0, 0, 0, 
	5, 0, 0, 0, 0, 0, 0, 13, 
	0, 0, 0, 0, 0, 19, 3, 0, 
	0, 7, 3, 3, 0, 0, 0, 0, 
	5, 5, 0, 0, 0, 0, 0, 19, 
	3, 3, 0, 0, 11, 3, 3, 0, 
	0, 0, 0, 5, 5, 0, 0, 0, 
	0, 0, 19, 3, 0, 0, 9, 3, 
	3, 0, 0, 0, 0, 16, 3, 3, 
	0, 0, 5, 0, 5, 0, 5, 0, 
	0, 5, 5, 0, 16, 3, 0, 5, 
	0, 0, 5, 0, 0, 5, 0, 0, 
	0, 5, 5, 0, 0, 0, 5, 0, 
	5, 0, 0, 0, 5, 0, 0, 5, 
	0, 0, 0, 13, 0, 0, 5, 5, 
	0, 0, 5, 0, 0, 5, 0, 16, 
	3, 0, 0, 0, 0, 0, 0, 0, 
}

const png_extractor_start int = 0
const png_extractor_first_final int = 0
const png_extractor_error int = -1

const png_extractor_en_png_extractor int = 0


//line png-extractor.rl:65



func main() {
  data = make([]byte, BUF_LEN)
  
//line png-extractor.go:375
	{
	cs = png_extractor_start
	}

//line png-extractor.rl:71


  offset = 0
  f,err := os.Open("data/image.png")
  check(err)

  for {
    n,err := f.Read(data)
    if err == io.EOF { break }
    check(err)
    p = 0
    pe = n
    
//line png-extractor.go:394
	{
	var _klen int
	var _trans int
	var _acts int
	var _nacts uint
	var _keys int
	if p == pe {
		goto _test_eof
	}
_resume:
	_keys = int(_png_extractor_key_offsets[cs])
	_trans = int(_png_extractor_index_offsets[cs])

	_klen = int(_png_extractor_single_lengths[cs])
	if _klen > 0 {
		_lower := int(_keys)
		var _mid int
		_upper := int(_keys + _klen - 1)
		for {
			if _upper < _lower {
				break
			}

			_mid = _lower + ((_upper - _lower) >> 1)
			switch {
			case data[p] < _png_extractor_trans_keys[_mid]:
				_upper = _mid - 1
			case data[p] > _png_extractor_trans_keys[_mid]:
				_lower = _mid + 1
			default:
				_trans += int(_mid - int(_keys))
				goto _match
			}
		}
		_keys += _klen
		_trans += _klen
	}

	_klen = int(_png_extractor_range_lengths[cs])
	if _klen > 0 {
		_lower := int(_keys)
		var _mid int
		_upper := int(_keys + (_klen << 1) - 2)
		for {
			if _upper < _lower {
				break
			}

			_mid = _lower + (((_upper - _lower) >> 1) & ^1)
			switch {
			case data[p] < _png_extractor_trans_keys[_mid]:
				_upper = _mid - 2
			case data[p] > _png_extractor_trans_keys[_mid + 1]:
				_lower = _mid + 2
			default:
				_trans += int((_mid - int(_keys)) >> 1)
				goto _match
			}
		}
		_trans += _klen
	}

_match:
	_trans = int(_png_extractor_indicies[_trans])
	cs = int(_png_extractor_trans_targs[_trans])

	if _png_extractor_trans_actions[_trans] == 0 {
		goto _again
	}

	_acts = int(_png_extractor_trans_actions[_trans])
	_nacts = uint(_png_extractor_actions[_acts]); _acts++
	for ; _nacts > 0; _nacts-- {
		_acts++
		switch _png_extractor_actions[_acts-1] {
		case 0:
//line png-extractor.rl:34

    if verb { fmt.Printf("png found at: %s\n", logAddr(p-PNG_MAGIC_LEN+1)) }
  
		case 1:
//line png-extractor.rl:37

    if p + chunkLen < BUF_LEN {
      p += chunkLen
    } else {
      toSkip = true
      p++; goto _out

    }
  
		case 2:
//line png-extractor.rl:49
 chunkLen=int(uint32Val(p)) 
		case 3:
//line png-extractor.rl:53
 if verb { fmt.Printf("IHDR at: %s\n", logAddr(p-3)) } 
		case 4:
//line png-extractor.rl:54
 if verb { fmt.Printf("IEND at: %s\n", logAddr(p-3)) } 
		case 5:
//line png-extractor.rl:55
 if verb { fmt.Printf("PLTE|IDAT at: %s\n", logAddr(p-3)) } 
//line png-extractor.go:498
		}
	}

_again:
	p++
	if p != pe {
		goto _resume
	}
	_test_eof: {}
	_out: {}
	}

//line png-extractor.rl:84
    if toSkip {
      toSkip = false
      _, err = f.Seek(int64(offset + p + chunkLen), 0)
      check(err)
      offset += p + chunkLen
    } else {
      offset += n
    }
  }
}
